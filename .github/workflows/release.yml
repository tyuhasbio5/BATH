name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggers the workflow when a tag starting with 'v' is pushed

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86, x64, arm]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up build environment
        shell: bash
        run: |
          if [ ${{ matrix.os }} == 'ubuntu-latest' ]; then
            sudo apt-get update
            sudo apt-get install -y autoconf gcc make
          elif [ ${{ matrix.os }} == 'windows-latest' ]; then
            # Set up MSYS2 and install autoconf
            pacman --version || true  # Check if pacman is available (optional)
            echo "Setting up MSYS2"
            # Install MSYS2 and necessary packages
            # You may need to customize this based on MSYS2 installation steps
            curl -L -o msys2-setup-x86_64.exe https://github.com/msys2/msys2-installer/releases/download/2024-05-07/msys2-x86_64-20240507.exe
            ./msys2-setup-x86_64.exe -y --quiet-mode --no-startmenu --components=system,pacman,msys2-base  # Example command, adjust as needed
            export MSYS="winsymlinks:nativestrict"
            export MSYS2_PATH_TYPE="inherit"
            export PATH="/mingw64/bin:$PATH"
            # Refresh environment variables
            source /etc/profile.d/msys2.sh
            # Update MSYS2 packages
            pacman --noconfirm -Syu
            # Install necessary packages
            pacman --noconfirm -S mingw-w64-x86_64-toolchain autoconf automake libtool
          elif [ ${{ matrix.os }} == 'macos-latest' ]; then
            brew install autoconf gcc make
          fi

      - name: Clone Easel repository
        run: |
          git clone https://github.com/TravisWheelerLab/easel
          cd easel
          git checkout BATH
          cd ..

      - name: Run autoconf
        shell: bash
        run: autoconf

      - name: Configure
        run: ./configure

      - name: Build
        run: |
          make
          mkdir -p installation/usr/local/bin
          cd src && make install DESTDIR=../installation

      - name: Extract version from github.ref
        id: extract_version
        run: echo "::set-output name=version::$(echo ${GITHUB_REF#refs/tags/})"

      - name: Create tar.gz archive
        run: |
          if [ ${{ matrix.os }} == 'windows-latest' ]; then
            cd installation/usr/local/bin
            zip -r ../../../BATH-${{ steps.extract_version.outputs.version }}.${{ matrix.os }}.${{ matrix.arch }}.zip bathsearch.exe bathbuild.exe bathconvert.exe bathfetch.exe bathstat.exe
          else
            cd installation/usr/local/bin
            tar -czvf ../../../BATH-${{ steps.extract_version.outputs.version }}.${{ matrix.os }}.${{ matrix.arch }}.tar.gz bathsearch bathbuild bathconvert bathfetch bathstat
          fi

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: BATH-${{ matrix.os }}-${{ matrix.arch }}
          path: installation/BATH-${{ steps.extract_version.outputs.version }}.${{ matrix.os }}.${{ matrix.arch }}.tar.gz
          if-no-files-found: error

  release:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86, x64, arm]
    steps:
      - uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: BATH-${{ matrix.os }}-${{ matrix.arch }}
          path: ./artifacts

      - name: List files in artifacts directory
        run: |
          echo "Listing files in ./artifacts:"
          ls -l ./artifacts

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ./artifacts/BATH-${{ matrix.os }}-${{ matrix.arch }}/*
          tag_name: ${{ steps.extract_version.outputs.version }}
          name: Release ${{ steps.extract_version.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
